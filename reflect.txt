After finishing workshop5, I’ve learned how to create a lambda expression, how to code a function object, and how to probably handle exceptions. Function object also called functor has two advantages, one is that a functor can contain state and the other is that a functor is a type and therefore can be used as a template parameter. We can use functor to perform the same operation in several different parts of an application with possibly different states. A lambda expression is only used in a local are of an application (within a function), which is a shorthand for a function object without an identifier.

In module Collection, a function pointer void (*c_observer)(const Collection<T>& collection, const T& item) allows the client to register an observer, and it will be called whenever Collection<T>& operator+=(const T& item) is used to add a new item on the Collection object.

In w5_p2.cpp, auto price_adj = [=](Book& bk){} is a lambda expression that fixes the price information, and it’s only available within the scope of main(). The capture list [=] denotes capture by value, which means all non-local variables by value can be accessed in the expression, in this case we are referring to  double usdToCadRate and double gbpToCadRate.

In class SpellChecker (a functor), the constructor accepts the state of the function object, which is the file it’s going to read in. Also, this class overloads the function call operator () that accepts a std::string& (descriptions for books and titles for movies) as its parameter.
In the constructor of SpellChecker, we throw an exception “Bad file name!” if that file doesn’t exist. And in T& operator[](size_t idx) const of template class Collection, we throw a std::out_of_range exception if the index is out of bound. Both exceptions will be handled with proper output messages on the client side using try and catch block (w5_p2.cpp).

To avoid the duplicated logic in classes Movies and Book we can declare a helper function that can be used for both classes. The default constructors in classes Movie and Book are necessary and we can’t remove them. When we initialize Movie movies[5], each element of the array will be instantiated by the default constructors, if they don’t exist, errors will occur at compile time showing “no matching function call”. 
